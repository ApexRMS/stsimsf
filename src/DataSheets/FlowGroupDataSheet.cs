// stsim-stockflow: SyncroSim Add-On Package (to stsim) for integrating stocks and flows into state-and-transition simulation models in ST-Sim.
// Copyright © 2007-2024 Apex Resource Management Solutions Ltd. (ApexRMS). All rights reserved.

using System;
using System.Data;
using SyncroSim.Core;
using System.Globalization;
using System.Collections.Generic;

namespace SyncroSim.STSimStockFlow
{
    class FlowGroupDataSheet : DataSheet
    {
        public override void Validate(object proposedValue, string columnName)
        {
            base.Validate(proposedValue, columnName);

            if (columnName == Constants.NAME_COLUMN_NAME)
            {
                ValidateName(Convert.ToString(proposedValue, CultureInfo.InvariantCulture));
            }
        }

        public override void Validate(DataRow proposedRow, DataTransferMethod transferMethod)
        {
            base.Validate(proposedRow, transferMethod);
            ValidateName(Convert.ToString(proposedRow[Constants.NAME_COLUMN_NAME], CultureInfo.InvariantCulture));
        }

        public override void Validate(DataTable proposedData, DataTransferMethod transferMethod)
        {
            base.Validate(proposedData, transferMethod);

            foreach (DataRow dr in proposedData.Rows)
            {
                if (!DataTableUtilities.GetDataBool(dr, Constants.IS_AUTO_COLUMN_NAME))
                {
                    ValidateName(Convert.ToString(dr[Constants.NAME_COLUMN_NAME], CultureInfo.InvariantCulture));
                }
            }
        }

        public override void DeleteRows(IEnumerable<DataRow> rows)
        {
            List<DataRow> l = new List<DataRow>();

            foreach (DataRow dr in rows)
            {
                if (!DataTableUtilities.GetDataBool(dr, Constants.IS_AUTO_COLUMN_NAME))
                {
                    l.Add(dr);
                }
            }

            if (l.Count > 0)
            {
                base.DeleteRows(l);
            }
        }

        internal void DeleteAutoGeneratedRows(IEnumerable<DataRow> rows)
        {
            this.BeginDeleteRows();

            DataTable dt = this.GetData();

            foreach (DataRow dr in rows)
            {
                DataTableUtilities.DeleteTableRow(dt, dr);
            }

            this.EndDeleteRows();
        }

        private static void ValidateName(string name)
        {
            if (name.EndsWith(Constants.AUTO_COLUMN_SUFFIX, StringComparison.Ordinal))
            {
                string msg = string.Format(CultureInfo.InvariantCulture,
                    "The flow group name cannot have the suffix: '{0}'.",
                    Constants.AUTO_COLUMN_SUFFIX);

                throw new DataException(msg);
            }
        }
    }
}
